enum AuthAction {
    LOGIN
    REGISTER
}

# Inputs

input RequestAuthCodeInput {
    "The user's e-mail address"
    email: EmailAddress!
    "Auth action that requested this auth code"
    action: AuthAction

    "User-agent used while creating the session"
    userAgent: String
    "Remote host IP address used while creating the session"
    userAddr: IPAddress
}

input AuthInput {
    "The user's e-mail address"
    email: EmailAddress!
    "Provided login code"
    code: String!

    "User-agent used while creating the session"
    userAgent: String
    "Remote host IP address used while creating the session"
    userAddr: IPAddress
}

# Payloads

type RequestAuthCodePayload {
    result: Result!
    action: AuthAction
}

type AuthPayload {
    result: Result!
    sessionId: String
    user: User
}

# @todo Implement below

type LogOutPayload {
    result: Result!
}

type LogOutAllPayload {
    result: Result!
    deletedCount: Int
}

type DeleteSessionPayload {
    result: Result!
}

type DeleteAllSessionsPayload {
    result: Result!
    deletedCount: Int
}

# Extends

extend type Mutation {
    "Request a login code"
    requestAuthCode(input: RequestAuthCodeInput): RequestAuthCodePayload
    "Log in user"
    logIn(input: AuthInput): AuthPayload
    "Register a new user account"
    register(input: AuthInput): AuthPayload


    "Log out current user out of current session"
    logOut: LogOutPayload
    "Log out current user out of all sessions"
    logOutAll: LogOutAllPayload

    "Delete a specific session"
    deleteSession(sessionId: String): DeleteSessionPayload
    "Delete all sessions for specified user"
    deleteAllSessions(userId: ID): DeleteAllSessionsPayload
}