version: 2.1

# todo: Separate API build job
# todo: Use workspace
# todo: Development deploy pipeline
# todo: Use tags on master to deploy prod, `deploy-dev` branch for dev deployments

executors:
  main:
    machine:
      image: ubuntu-2204:current
  exec_docker:
    resource_class: small
    docker:
      - image: cimg/node:23.6.1
        auth:
          username: xwirkijowski
          password: ${DOCKER_TOKEN}

jobs:
  api-image:
    executor: exec_docker
    steps:
      - checkout
      - run: cd api && npm ci --include=dev && npm run api-compile
      - setup_remote_docker
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          docker build -t xwirkijowski/jals-api:$TAG -t xwirkijowski/jals-api:latest -f ./api/docker/Dockerfile ./api
          echo ${DOCKER_TOKEN} | docker login -u xwirkijowski --password-stdin
          docker push xwirkijowski/jals-api --all-tags

  client-image-prod:
    executor: exec_docker
    steps:
      - checkout
      - run: cd client && ls -all
      - setup_remote_docker
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          docker build -t xwirkijowski/jals-client:$TAG -t xwirkijowski/jals-client:latest -f ./client/docker/prod.Dockerfile ./client
          echo ${DOCKER_TOKEN} | docker login -u xwirkijowski --password-stdin
          docker push xwirkijowski/jals-client --all-tags

  client-image-dev:
    executor: exec_docker
    steps:
      - checkout
      - run: cd client
      - setup_remote_docker
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          docker build -t xwirkijowski/jals-client:$TAG -t xwirkijowski/jals-client:dev -f ./client/docker/dev.Dockerfile ./client
          echo ${DOCKER_TOKEN} | docker login -u xwirkijowski --password-stdin
          docker push xwirkijowski/jals-client --all-tags

  compose-upload:
    executor: main
    steps:
      - add_ssh_keys:
          fingerprints:
            - ${KEY_FINGERPRINT}
      - checkout
      - run: ls -all
      - run:
          name: Deploy docker-compose files
          command: scp -v ./docker-compose.* ${DEPLOY_USER}@${DEPLOY_HOST}:${PROJECT_PATH}
      - run:
          name: Create environment files
          command: ssh ${DEPLOY_USER}@${DEPLOY_HOST} "echo SECRET_AXIOM=\"${SECRET_AXIOM_PROD}\" > ${PROJECT_PATH}/.env.prod && echo SECRET_SENTRY=\"${SECRET_SENTRY}\" >> ${PROJECT_PATH}/.env.prod && echo SECRET_RESEND=\"${SECRET_RESEND_PROD}\" >> ${PROJECT_PATH}/.env.prod && echo SECRET_AXIOM=\"${SECRET_AXIOM_DEV}\" > ${PROJECT_PATH}/.env.dev && echo SECRET_SENTRY=\"${SECRET_SENTRY}\" >> ${PROJECT_PATH}/.env.dev && echo SECRET_RESEND=\"${SECRET_RESEND_DEV}\" >> ${PROJECT_PATH}/.env.dev"

  #  compose-dev:
  #    executor: exec_docker
  #    steps:
  #      - run:
  #          name: Compose on remote
  #          command: ssh ${DEPLOY_USER}@${DEPLOY_HOST} "docker compose -f docker-compose.dev-contained.yml --env-file .env.dev -d up"


  compose-prod:
    executor: main
    steps:
      - add_ssh_keys:
          fingerprints:
            - ${KEY_FINGERPRINT}
      - run:
          name: Pull new images on remote
          command: ssh ${DEPLOY_USER}@${DEPLOY_HOST} "docker compose -f ${PROJECT_PATH}/docker-compose.prod-contained.yml pull"
      - run:
          name: Take down stale containers
          command: ssh ${DEPLOY_USER}@${DEPLOY_HOST} "docker compose -f ${PROJECT_PATH}/docker-compose.prod-contained.yml down"
      - run:
          name: Compose on remote
          command: ssh ${DEPLOY_USER}@${DEPLOY_HOST} "docker compose -f ${PROJECT_PATH}/docker-compose.prod-contained.yml --env-file ${PROJECT_PATH}/.env.prod up -d"
      - run:
          name: Cleanup old images
          command: ssh ${DEPLOY_USER}@${DEPLOY_HOST} "docker image prune -f"


workflows:
  deploy-to-prod:
    jobs:
      - api-image:
          filters:
            branches:
              only:
                - deploy-prod
      - client-image-prod:
          filters:
            branches:
              only:
                - deploy-prod
      - compose-upload:
          filters:
            branches:
              only:
                - deploy-prod
      - compose-prod:
          requires:
            - api-image
            - client-image-prod
            - compose-upload

#  deploy-to-dev:
#    jobs:
#      - api-image:
#          filters:
#            branches:
#              only:
#                - deploy-dev
#      - client-image-dev:
#          filters:
#            branches:
#              only:
#                - deploy-dev
#      - compose-upload:
#          filters:
#            branches:
#              only:
#                - deploy-dev
#      - compose-dev:
#          requires:
#            - api-image
#            - client-image-dev
#            - compose-upload